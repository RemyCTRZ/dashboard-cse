import Head from 'next/head'
import styles from '../styles/Home.module.css'
import Header from '../components/Header'
import Navbar from '../components/Navbar'
import Dashboard from '../components/Dashboard'
import { useState, useEffect } from 'react'
import { getCookie, hasCookie } from 'cookies-next'
import UsersList from '../components/UsersList'
import { apiService } from '../services/APIService'
import Login from '../components/Login'

export default function DashboardAdmin() {

  const [currentUser, setCurrentUser] = useState(null)

  const [dashboardWindow, setDashboardWindow] = useState({
    dashboard: true,
    candidatesList: false,
    companiesList: false,
  })

  const [currentPage, setCurrentPage] = useState('Accueil')

  const [candidates, setCandidates] = useState([])

  const [companies, setCompanies] = useState([])

  const [monitorChange, setMonitorChange] = useState(false)

  const [accessToken, setAccessToken] = useState()

  let optionsAxios = {
    headers: {
      Authorization: `Bearer ${accessToken}`
    }
  }

  const [isConnected, setIsConnected] = useState(false)

  useEffect(() => {
    setCurrentUser(getCookie('userFirstname'))
  }, [hasCookie('userFirstname')])

  useEffect(() => {
    if (hasCookie('currentPage')) {
      if (getCookie('currentPage') == 'Home')
        return switchToDashboard()
      else if (getCookie('currentPage') == 'CandidatesList')
        return switchToCandidatesList()
      else if (getCookie('currentPage') == 'CompaniesList')
        return switchToCompaniesList()
    }
  }, [hasCookie('currentPage')])

  useEffect(() => {
    if (!hasCookie('refreshToken')) return
    setIsConnected(true)
    if (hasCookie('accessToken')) optionsAxios = {
      headers: {
        Authorization: `Bearer ${getCookie('accessToken')}`
      }
    }
    apiService.get('candidates', optionsAxios).then(response => setCandidates(response.data))
    apiService.get('companies', optionsAxios).then(response => setCompanies(response.data))
  }, [dashboardWindow, monitorChange, hasCookie('refreshToken')])

  const switchToDashboard = () => {
    setDashboardWindow({
      dashboard: true,
      candidatesList: false,
      companiesList: false,
    })
  }

  const switchToCandidatesList = () => {
    setDashboardWindow({
      dashboard: false,
      candidatesList: true,
      companiesList: false,
    })
  }

  const switchToCompaniesList = () => {
    setDashboardWindow({
      dashboard: false,
      candidatesList: false,
      companiesList: true,
    })
  }

  return (
    <>
      <Head>
        <title className={styles.title}>Dashboard - CSE</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {!isConnected ? (
        <Login optionsAxios={optionsAxios} setAccessToken={setAccessToken} setCurrentUser={setCurrentUser} />
      ) : (
        <>
          <Header
            currentPage={currentPage} user={currentUser}
          />
          <main className={styles.main}>
            <Navbar
              currentUser={currentUser}
              setCurrentUser={setCurrentUser}
              switchToDashboard={switchToDashboard}
              switchToCandidatesList={switchToCandidatesList}
              switchToCompaniesList={switchToCompaniesList}
              dashboardWindow={dashboardWindow}
              setCurrentPage={setCurrentPage}
              setIsConnected={setIsConnected}
            />
            {dashboardWindow.dashboard && <Dashboard companies={companies} candidates={candidates} />}
            {dashboardWindow.candidatesList && <UsersList optionsAxios={optionsAxios} candidates={candidates} setMonitorChange={setMonitorChange} monitorChange={monitorChange} />}
            {dashboardWindow.companiesList && <UsersList optionsAxios={optionsAxios} companies={companies} setMonitorChange={setMonitorChange} monitorChange={monitorChange} />}
          </main>
        </>
      )
      }
    </>
  )
}